import archiver from 'archiver';
import yauzl from 'yauzl';
import imageCacheService from './imageCache.js';

class BackupService {
  constructor(prisma) {
    this.prisma = prisma;
    this.imageCache = imageCacheService;
  }

  // Helper function to convert BigInt values to numbers for JSON serialization
  convertBigInts(obj) {
    return JSON.parse(JSON.stringify(obj, (key, value) =>
      typeof value === 'bigint' ? Number(value) : value
    ));
  }

  // Get comprehensive user data for backup
  async getUserData(userId) {
    console.log(`BackupService: Getting user data for user ${userId}`);
    
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: {
        userGames: {
          include: {
            game: true
          }
        },
        userMovies: {
          include: {
            movie: true
          }
        },
        apiCredentials: true
      }
    });

    if (!user) {
      throw new Error('User not found');
    }

    console.log(`BackupService: Found user with ${user.userGames?.length || 0} games and ${user.userMovies?.length || 0} movies`);
    
    return this.convertBigInts(user);
  }

  // Collect all image URLs from user data
  collectImageUrls(userData) {
    console.log('BackupService: Collecting image URLs...');
    
    const imageUrls = new Set();
    
    // Add user avatar
    if (userData.avatarUrl) {
      imageUrls.add(userData.avatarUrl);
    }

    // Add game images
    userData.userGames?.forEach(userGame => {
      const game = userGame.game;
      if (game?.coverUrl) imageUrls.add(game.coverUrl);
      if (game?.bannerUrl) imageUrls.add(game.bannerUrl);
      if (game?.screenshots) {
        game.screenshots.forEach(url => imageUrls.add(url));
      }
      if (game?.artworks) {
        game.artworks.forEach(url => imageUrls.add(url));
      }
    });

    // Add movie images  
    userData.userMovies?.forEach(userMovie => {
      const movie = userMovie.movie;
      if (movie?.coverUrl) imageUrls.add(movie.coverUrl);
      if (movie?.backdropUrl) imageUrls.add(movie.backdropUrl);
    });

    const urls = Array.from(imageUrls);
    console.log(`BackupService: Found ${urls.length} unique image URLs`);
    
    return urls;
  }

  // Cache images with progress tracking
  async cacheImagesWithProgress(imageUrls, progressCallback) {
    console.log(`BackupService: Starting to cache ${imageUrls?.length || 0} images`);
    
    if (!imageUrls || imageUrls.length === 0) {
      console.log('BackupService: No images to cache');
      return;
    }

    let cachedCount = 0;
    const batchSize = 5; // Process 5 images at a time to avoid overwhelming the system

    for (let i = 0; i < imageUrls.length; i += batchSize) {
      const batch = imageUrls.slice(i, i + batchSize);
      console.log(`BackupService: Processing batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(imageUrls.length/batchSize)} (${batch.length} images)`);
      
      // Process batch in parallel
      const results = await Promise.allSettled(
        batch.map(url => this.imageCache.cacheImage(url))
      );
      
      // Count successful caches
      const successful = results.filter(r => r.status === 'fulfilled').length;
      console.log(`BackupService: Cached ${successful}/${batch.length} images in this batch`);

      cachedCount += batch.length;
      if (progressCallback) {
        const progress = (cachedCount / imageUrls.length) * 100;
        progressCallback(progress);
      }
    }
    
    console.log(`BackupService: Finished caching images (${cachedCount}/${imageUrls.length})`);
  }

  // Create backup structure with all data and images
  async createBackupStructure(userData) {
    console.log('BackupService: Creating backup structure...');
    
    // Get cached images
    const cachedImages = await this.imageCache.getAllCachedImages();
    console.log(`BackupService: Found ${cachedImages.length} cached images`);

    // Create comprehensive backup data
    const backupData = {
      metadata: {
        version: '1.0.0',
        created: new Date().toISOString(),
        totalGames: userData.userGames?.length || 0,
        totalMovies: userData.userMovies?.length || 0,
        userGamesCount: userData.userGames?.length || 0,
        userMoviesCount: userData.userMovies?.length || 0,
        totalImages: cachedImages.length
      },
      user: {
        id: userData.id,
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        avatarUrl: userData.avatarUrl,
        timezone: userData.timezone,
        themePreference: userData.themePreference,
        createdAt: userData.createdAt,
        updatedAt: userData.updatedAt
      },
      games: userData.userGames?.map(ug => ug.game) || [],
      movies: userData.userMovies?.map(um => um.movie) || [],
      userGames: userData.userGames || [],
      userMovies: userData.userMovies || [],
      apiCredentials: userData.apiCredentials || []
    };

    // Create README content
    const readme = `# BackLogus Data Backup

## Backup Information
- Created: ${backupData.metadata.created}
- Version: ${backupData.metadata.version}
- Total Games: ${backupData.metadata.totalGames}
- Total Movies: ${backupData.metadata.totalMovies}
- User Games: ${backupData.metadata.userGamesCount}
- User Movies: ${backupData.metadata.userMoviesCount}
- Cached Images: ${backupData.metadata.totalImages}

## Contents
- \`backup.json\` - Complete database backup
- \`images/\` - Cached media images
- \`README.md\` - This file

## Import Instructions
Use the "Import Data" feature in BackLogus Settings to restore this backup.
`;

    console.log('BackupService: Backup structure created successfully');

    return {
      data: backupData,
      images: cachedImages,
      readme: readme
    };
  }

  // Create comprehensive backup for a user
  async createBackup(userId, reply, progressCallback = null) {
    if (progressCallback) {
      progressCallback({ step: 'initializing', progress: 0, message: 'Starting backup process...' });
    }

    // Get user data
    if (progressCallback) {
      progressCallback({ step: 'data-fetch', progress: 20, message: 'Fetching user data...' });
    }
    
    const userData = await this.getUserData(userId);

    // Collect all image URLs
    if (progressCallback) {
      progressCallback({ step: 'image-collection', progress: 40, message: 'Collecting images...' });
    }
    
    const imageUrls = this.collectImageUrls(userData);

    // Cache images with progress tracking
    if (progressCallback) {
      await this.cacheImagesWithProgress(imageUrls, (imageProgress) => {
        const overallProgress = 50 + (imageProgress * 0.3); // 50-80% for image caching
        progressCallback({ 
          step: 'image-caching', 
          progress: Math.round(overallProgress), 
          message: `Caching images... (${Math.round(imageProgress)}%)` 
        });
      });
    } else {
      await this.cacheImagesWithProgress(imageUrls);
    }

    // Create backup structure
    if (progressCallback) {
      progressCallback({ step: 'backup-structure', progress: 80, message: 'Preparing backup structure...' });
    }
    
    const backupData = await this.createBackupStructure(userData);

    // Create ZIP archive
    if (progressCallback) {
      progressCallback({ step: 'zip-creation', progress: 90, message: 'Creating backup archive...' });
    }
    
    await this.createZipArchive(backupData, reply, progressCallback);
  }

  async createBackupBuffer(userId, progressCallback = null) {
    if (progressCallback) {
      progressCallback({ step: 'initializing', progress: 0, message: 'Starting backup process...' });
    }

    // Get user data
    if (progressCallback) {
      progressCallback({ step: 'data-fetch', progress: 20, message: 'Fetching user data...' });
    }
    
    const userData = await this.getUserData(userId);

    // Collect all image URLs
    if (progressCallback) {
      progressCallback({ step: 'image-collection', progress: 40, message: 'Collecting images...' });
    }
    
    const imageUrls = this.collectImageUrls(userData);

    // Cache images with progress tracking
    if (progressCallback) {
      await this.cacheImagesWithProgress(imageUrls, (imageProgress) => {
        const overallProgress = 50 + (imageProgress * 0.3); // 50-80% for image caching
        progressCallback({ 
          step: 'image-caching', 
          progress: Math.round(overallProgress), 
          message: `Caching images... (${Math.round(imageProgress)}%)` 
        });
      });
    } else {
      await this.cacheImagesWithProgress(imageUrls);
    }

    // Create backup structure
    if (progressCallback) {
      progressCallback({ step: 'backup-structure', progress: 80, message: 'Preparing backup structure...' });
    }
    
    const backupData = await this.createBackupStructure(userData);

    // Create ZIP buffer
    if (progressCallback) {
      progressCallback({ step: 'zip-creation', progress: 90, message: 'Creating backup archive...' });
    }
    
    return await this.createZipBuffer(backupData, progressCallback);
  }

  // Create ZIP archive and stream to response
  async createZipArchive(backupData, reply, progressCallback = null) {
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    // Set response headers for download (preserve existing CORS headers)
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `backlogus-backup-${timestamp}.zip`;
    
    // Set download headers without overriding CORS headers
    reply.type('application/zip');
    reply.header('Content-Disposition', `attachment; filename="${filename}"`);
    
    // Ensure CORS headers are preserved (in case they get overridden)
    if (!reply.getHeader('Access-Control-Allow-Origin')) {
      reply.header('Access-Control-Allow-Origin', 'http://localhost:5173');
      reply.header('Access-Control-Allow-Credentials', 'true');
    }
    
    // Pipe archive to response
    archive.pipe(reply.raw);
    
    // Track progress
    let filesAdded = 0;
    const totalFiles = 2 + (backupData.images ? backupData.images.length : 0); // backup.json + README.md + images
    
    const updateProgress = () => {
      if (progressCallback) {
        const zipProgress = 90 + (filesAdded / totalFiles) * 10; // 90-100% for ZIP creation
        progressCallback({
          step: 'zip-creation',
          progress: Math.round(zipProgress),
          message: `Adding files to archive... (${filesAdded}/${totalFiles})`
        });
      }
    };

    // Add main backup file
    archive.append(JSON.stringify(backupData.data, null, 2), { name: 'backup.json' });
    filesAdded++;
    updateProgress();

    // Add README
    archive.append(backupData.readme, { name: 'README.md' });
    filesAdded++;
    updateProgress();

    // Add cached images
    if (backupData.images) {
      for (const imageData of backupData.images) {
        const buffer = Buffer.from(imageData.data, 'base64');
        archive.append(buffer, { name: `images/${imageData.filename}` });
        filesAdded++;
        updateProgress();
      }
    }

    // Finalize archive
    await archive.finalize();
  }

  async createZipBuffer(backupData, progressCallback = null) {
    return new Promise((resolve, reject) => {
      const archive = archiver('zip', { zlib: { level: 9 } });
      const chunks = [];
      
      archive.on('data', (chunk) => {
        chunks.push(chunk);
      });
      
      archive.on('end', () => {
        const buffer = Buffer.concat(chunks);
        resolve(buffer);
      });
      
      archive.on('error', (err) => {
        reject(err);
      });
      
      // Track progress
      let filesAdded = 0;
      const totalFiles = 2 + (backupData.images ? backupData.images.length : 0); // backup.json + README.md + images
      
      const updateProgress = () => {
        if (progressCallback) {
          const zipProgress = 90 + (filesAdded / totalFiles) * 10; // 90-100% for ZIP creation
          progressCallback({
            step: 'zip-creation',
            progress: Math.round(zipProgress),
            message: `Adding files to archive... (${filesAdded}/${totalFiles})`
          });
        }
      };

      // Add main backup file
      archive.append(JSON.stringify(backupData.data, null, 2), { name: 'backup.json' });
      filesAdded++;
      updateProgress();

      // Add README
      archive.append(backupData.readme, { name: 'README.md' });
      filesAdded++;
      updateProgress();

      // Add cached images
      if (backupData.images) {
        for (const imageData of backupData.images) {
          const buffer = Buffer.from(imageData.data, 'base64');
          archive.append(buffer, { name: `images/${imageData.filename}` });
          filesAdded++;
          updateProgress();
        }
      }

      // Finalize archive
      archive.finalize();
    });
  }

  // Parse ZIP backup file
  async parseBackupFile(buffer) {
    return new Promise((resolve, reject) => {
      yauzl.fromBuffer(buffer, { lazyEntries: true }, (err, zipfile) => {
        if (err) {
          reject(new Error('Invalid ZIP file format'));
          return;
        }

        const extractedData = {
          metadata: null,
          userProfile: null,
          apiCredentials: null,
          database: null,
          images: [],
          imagesManifest: null,
        };

        zipfile.readEntry();

        zipfile.on('entry', (entry) => {
          if (/\/$/.test(entry.fileName)) {
            // Directory entry, skip
            zipfile.readEntry();
          } else {
            // File entry
            zipfile.openReadStream(entry, (err, readStream) => {
              if (err) {
                reject(err);
                return;
              }

              if (entry.fileName.startsWith('images/')) {
                // This is an image file, read as binary
                const chunks = [];
                readStream.on('data', (chunk) => {
                  chunks.push(chunk);
                });

                readStream.on('end', () => {
                  const buffer = Buffer.concat(chunks);
                  const filename = entry.fileName.replace('images/', '');
                  extractedData.images.push({
                    filename,
                    data: buffer.toString('base64'),
                    size: buffer.length
                  });
                  zipfile.readEntry();
                });
              } else {
                // This is a text/JSON file
                let content = '';
                readStream.on('data', (chunk) => {
                  content += chunk.toString();
                });

                readStream.on('end', () => {
                  try {
                    // Parse JSON content based on file path
                    if (entry.fileName === 'backup.json') {
                      const backupData = JSON.parse(content);
                      extractedData.metadata = backupData.metadata;
                      extractedData.userProfile = backupData.user;
                      extractedData.database = backupData;
                      extractedData.apiCredentials = backupData.apiCredentials;
                    }
                    
                    zipfile.readEntry();
                  } catch (parseError) {
                    reject(new Error(`Failed to parse ${entry.fileName}: ${parseError.message}`));
                  }
                });
              }
            });
          }
        });

        zipfile.on('end', () => {
          resolve(extractedData);
        });

        zipfile.on('error', (err) => {
          reject(err);
        });
      });
    });
  }

  // Import backup for a user
  async importBackup(userId, fileBuffer) {
    try {
      // Parse the ZIP file
      const backupData = await this.parseBackupFile(fileBuffer);

      // Validate backup structure
      if (!backupData.metadata || !backupData.userProfile || !backupData.database) {
        throw new Error('Invalid backup file structure');
      }

      // Restore database in transaction
      await this.restoreDatabase(userId, backupData);

      // Restore cached images (outside transaction since it's file system operations)
      if (backupData.images && backupData.images.length > 0) {
        console.log(`Restoring ${backupData.images.length} cached images...`);
        await this.imageCache.restoreImages(backupData.images);
      }

      return {
        message: 'Backup imported successfully',
        imported: {
          games: backupData.metadata.totalGames || 0,
          movies: backupData.metadata.totalMovies || 0,
          userGames: backupData.metadata.userGamesCount || 0,
          userMovies: backupData.metadata.userMoviesCount || 0,
          apiCredentials: backupData.apiCredentials?.length || 0,
          images: backupData.images?.length || 0,
        }
      };
    } catch (error) {
      console.error('Backup import failed:', error);
      throw error;
    }
  }

  // Restore database data in transaction
  async restoreDatabase(userId, backupData) {
    await this.prisma.$transaction(async (prisma) => {
      // Clear existing user data (except the user record itself)
      await prisma.userGame.deleteMany({ where: { userId } });
      await prisma.userMovie.deleteMany({ where: { userId } });
      await prisma.userApiCredential.deleteMany({ where: { userId } });

      // Clear existing games and movies that might be orphaned
      await prisma.game.deleteMany({});
      await prisma.movie.deleteMany({});

      // Update user profile data
      await prisma.user.update({
        where: { id: userId },
        data: {
          email: backupData.userProfile.email,
          firstName: backupData.userProfile.firstName,
          lastName: backupData.userProfile.lastName,
          avatarUrl: backupData.userProfile.avatarUrl,
          timezone: backupData.userProfile.timezone,
          themePreference: backupData.userProfile.themePreference,
        }
      });

      // Restore complete games data first
      const gameIdMapping = new Map();
      if (backupData.database.games && backupData.database.games.length > 0) {
        for (const game of backupData.database.games) {
          const { id: oldId, ...gameData } = game;
          const newGame = await prisma.game.create({
            data: gameData
          });
          gameIdMapping.set(oldId, newGame.id);
        }
      }

      // Restore complete movies data first
      const movieIdMapping = new Map();
      if (backupData.database.movies && backupData.database.movies.length > 0) {
        for (const movie of backupData.database.movies) {
          const { id: oldId, ...movieData } = movie;
          const newMovie = await prisma.movie.create({
            data: movieData
          });
          movieIdMapping.set(oldId, newMovie.id);
        }
      }

      // Restore user games with mapped IDs
      if (backupData.database.userGames && backupData.database.userGames.length > 0) {
        for (const userGame of backupData.database.userGames) {
          const { id, userId: _, gameId, ...userGameData } = userGame;
          const newGameId = gameIdMapping.get(gameId);
          if (newGameId) {
            await prisma.userGame.create({
              data: {
                ...userGameData,
                userId,
                gameId: newGameId,
              }
            });
          }
        }
      }

      // Restore user movies with mapped IDs
      if (backupData.database.userMovies && backupData.database.userMovies.length > 0) {
        for (const userMovie of backupData.database.userMovies) {
          const { id, userId: _, movieId, ...userMovieData } = userMovie;
          const newMovieId = movieIdMapping.get(movieId);
          if (newMovieId) {
            await prisma.userMovie.create({
              data: {
                ...userMovieData,
                userId,
                movieId: newMovieId,
              }
            });
          }
        }
      }

      // Restore API credentials
      if (backupData.apiCredentials && backupData.apiCredentials.length > 0) {
        for (const cred of backupData.apiCredentials) {
          await prisma.userApiCredential.create({
            data: {
              ...cred,
              userId,
            }
          });
        }
      }
    });
  }

  // Get backup statistics
  async getBackupStats(userId) {
    try {
      const userData = await this.prisma.user.findUnique({
        where: { id: userId },
        include: {
          userGames: true,
          userMovies: true,
          apiCredentials: true,
        }
      });

      if (!userData) {
        throw new Error('User not found');
      }

      const cacheStats = await this.imageCache.getCacheStats();

      return {
        user: {
          totalGames: userData.userGames.length,
          totalMovies: userData.userMovies.length,
          apiCredentials: userData.apiCredentials.length,
        },
        cache: cacheStats,
        estimatedBackupSize: this.estimateBackupSize(userData, cacheStats)
      };
    } catch (error) {
      console.error('Failed to get backup stats:', error);
      throw error;
    }
  }

  // Estimate backup file size
  estimateBackupSize(userData, cacheStats) {
    // Rough estimation based on typical JSON sizes and image cache
    const jsonSizeEstimate = (
      userData.userGames.length * 500 + // ~500 bytes per user game entry
      userData.userMovies.length * 500 + // ~500 bytes per user movie entry  
      userData.apiCredentials.length * 200 + // ~200 bytes per API credential
      50000 // Base user data and metadata
    );

    const totalSizeBytes = jsonSizeEstimate + cacheStats.totalSize;
    return {
      jsonSize: jsonSizeEstimate,
      imageSize: cacheStats.totalSize,
      totalSize: totalSizeBytes,
      totalSizeMB: (totalSizeBytes / 1024 / 1024).toFixed(2)
    };
  }
}

export default BackupService;
